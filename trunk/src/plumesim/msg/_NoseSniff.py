# autogenerated by genmsg_py from NoseSniff.msg. Do not edit.
import roslib.message
import struct

import roslib.msg

class NoseSniff(roslib.message.Message):
  _md5sum = "de57ebe30d6194d1ccd8b3e97e5031dc"
  _type = "plumesim/NoseSniff"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header
string[] sensor_model
float32[] reading
float32 temperature_c	# temperature in celsius
float32 temperature_f	# temperature in fahrenheit
float32 humidity	# humidity in %


================================================================================
MSG: roslib/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

"""
  __slots__ = ['header','sensor_model','reading','temperature_c','temperature_f','humidity']
  _slot_types = ['Header','string[]','float32[]','float32','float32','float32']

  ## Constructor. Any message fields that are implicitly/explicitly
  ## set to None will be assigned a default value. The recommend
  ## use is keyword arguments as this is more robust to future message
  ## changes.  You cannot mix in-order arguments and keyword arguments.
  ##
  ## The available fields are:
  ##   header,sensor_model,reading,temperature_c,temperature_f,humidity
  ##
  ## @param self: self
  ## @param args: complete set of field values, in .msg order
  ## @param kwds: use keyword arguments corresponding to message field names
  ## to set specific fields. 
  def __init__(self, *args, **kwds):
    if args or kwds:
      super(NoseSniff, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = roslib.msg._Header.Header()
      if self.sensor_model is None:
        self.sensor_model = []
      if self.reading is None:
        self.reading = []
      if self.temperature_c is None:
        self.temperature_c = 0.
      if self.temperature_f is None:
        self.temperature_f = 0.
      if self.humidity is None:
        self.humidity = 0.
    else:
      self.header = roslib.msg._Header.Header()
      self.sensor_model = []
      self.reading = []
      self.temperature_c = 0.
      self.temperature_f = 0.
      self.humidity = 0.

  ## internal API method
  def _get_types(self): return self._slot_types

  ## serialize message into buffer
  ## @param buff StringIO: buffer
  def serialize(self, buff):
    try:
      buff.write(struct.pack('<3I', self.header.seq, self.header.stamp.secs, self.header.stamp.nsecs))
      length = len(self.header.frame_id)
      #serialize self.header.frame_id
      buff.write(struct.pack('<I%ss'%length, length, self.header.frame_id))
      #serialize self.sensor_model
      length = len(self.sensor_model)
      buff.write(struct.pack('<I', length))
      for val1 in self.sensor_model:
        length = len(val1)
        #serialize val1
        buff.write(struct.pack('<I%ss'%length, length, val1))
      #serialize self.reading
      length = len(self.reading)
      buff.write(struct.pack('<I', length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.reading))
      buff.write(struct.pack('<3f', self.temperature_c, self.temperature_f, self.humidity))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  ## unpack serialized message in str into this message instance
  ## @param self: self
  ## @param str str: byte array of serialized message
  def deserialize(self, str):
    try:
      if self.header is None:
        self.header = roslib.msg._Header.Header()
      end = 0
      start = end
      end += 12
      (self.header.seq, self.header.stamp.secs, self.header.stamp.nsecs,) = struct.unpack('<3I',str[start:end])
      start = end
      end += 4
      (length,) = struct.unpack('<I',str[start:end])
      #deserialize self.header.frame_id
      pattern = '<%ss'%length
      start = end
      end += struct.calcsize(pattern)
      (self.header.frame_id,) = struct.unpack(pattern, str[start:end])
      #deserialize self.sensor_model
      start = end
      end += 4
      (length,) = struct.unpack('<I',str[start:end])
      self.sensor_model = []
      for i in xrange(0, length):
        start = end
        end += 4
        (length,) = struct.unpack('<I',str[start:end])
        #deserialize val1
        pattern = '<%ss'%length
        start = end
        end += struct.calcsize(pattern)
        (val1,) = struct.unpack(pattern, str[start:end])
        self.sensor_model.append(val1)
      #deserialize self.reading
      start = end
      end += 4
      (length,) = struct.unpack('<I',str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.reading = struct.unpack(pattern, str[start:end])
      start = end
      end += 12
      (self.temperature_c, self.temperature_f, self.humidity,) = struct.unpack('<3f',str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  ## serialize message with numpy array types into buffer
  ## @param self: self
  ## @param buff StringIO: buffer
  ## @param numpy module: numpy python module
  def serialize_numpy(self, buff, numpy):
    try:
      buff.write(struct.pack('<3I', self.header.seq, self.header.stamp.secs, self.header.stamp.nsecs))
      length = len(self.header.frame_id)
      #serialize self.header.frame_id
      buff.write(struct.pack('<I%ss'%length, length, self.header.frame_id))
      #serialize self.sensor_model
      length = len(self.sensor_model)
      buff.write(struct.pack('<I', length))
      for val1 in self.sensor_model:
        length = len(val1)
        #serialize val1
        buff.write(struct.pack('<I%ss'%length, length, val1))
      #serialize self.reading
      length = len(self.reading)
      buff.write(struct.pack('<I', length))
      pattern = '<%sf'%length
      buff.write(self.reading.tostring())
      buff.write(struct.pack('<3f', self.temperature_c, self.temperature_f, self.humidity))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  ## unpack serialized message in str into this message instance using numpy for array types
  ## @param self: self
  ## @param str str: byte array of serialized message
  ## @param numpy module: numpy python module
  def deserialize_numpy(self, str, numpy):
    try:
      if self.header is None:
        self.header = roslib.msg._Header.Header()
      end = 0
      start = end
      end += 12
      (self.header.seq, self.header.stamp.secs, self.header.stamp.nsecs,) = struct.unpack('<3I',str[start:end])
      start = end
      end += 4
      (length,) = struct.unpack('<I',str[start:end])
      #deserialize self.header.frame_id
      pattern = '<%ss'%length
      start = end
      end += struct.calcsize(pattern)
      (self.header.frame_id,) = struct.unpack(pattern, str[start:end])
      #deserialize self.sensor_model
      start = end
      end += 4
      (length,) = struct.unpack('<I',str[start:end])
      self.sensor_model = []
      for i in xrange(0, length):
        start = end
        end += 4
        (length,) = struct.unpack('<I',str[start:end])
        #deserialize val1
        pattern = '<%ss'%length
        start = end
        end += struct.calcsize(pattern)
        (val1,) = struct.unpack(pattern, str[start:end])
        self.sensor_model.append(val1)
      #deserialize self.reading
      start = end
      end += 4
      (length,) = struct.unpack('<I',str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.reading = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 12
      (self.temperature_c, self.temperature_f, self.humidity,) = struct.unpack('<3f',str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

