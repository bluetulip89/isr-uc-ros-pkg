/* auto-generated by gensrv_cpp from /home/blazz/myStacks/plumesim/srv/ReadPlumeSim.srv.  Do not edit! */
#ifndef SRV_PLUMESIM_READPLUMESIM_H
#define SRV_PLUMESIM_READPLUMESIM_H

#include <string>
#include <cstring>
#include <vector>
#include <map>
#include "ros/message.h"
#include "ros/time.h"

#include "roslib/Header.h"
#include "geometry_msgs/Point.h"
#include "geometry_msgs/Quaternion.h"
#include "geometry_msgs/Pose.h"
#include "geometry_msgs/PoseWithCovariance.h"
#include "geometry_msgs/Vector3.h"
#include "geometry_msgs/Twist.h"
#include "geometry_msgs/TwistWithCovariance.h"
#include "nav_msgs/Odometry.h"

#include "roslib/Header.h"
#include "plumesim/NoseSniff.h"

namespace plumesim
{

struct ReadPlumeSim
{

inline static std::string getDataType() { return "plumesim/ReadPlumeSim"; }
inline static std::string getMD5Sum() { return "d189ef261c3d25d1f5ebde5203c19982"; }

//! \htmlinclude Request.msg.html

class Request : public ros::Message
{
public:
  typedef boost::shared_ptr<Request> Ptr;
  typedef boost::shared_ptr<Request const> ConstPtr;

  typedef nav_msgs::Odometry _odom_type;

  nav_msgs::Odometry odom;

  Request() : ros::Message()
  {
  }
  Request(const Request &copy) : ros::Message(),
    odom(copy.odom)
  {
    (void)copy;
  }
  Request &operator =(const Request &copy)
  {
    if (this == &copy)
      return *this;
    odom = copy.odom;
    return *this;
  }
  virtual ~Request() 
  {
  }
  inline static std::string __s_getDataType() { return std::string("plumesim/ReadPlumeSimRequest"); }
  inline static std::string __s_getMD5Sum() { return std::string(""); }
  inline static std::string __s_getMessageDefinition()
  {
    return std::string(
    "nav_msgs/Odometry odom\n"
    "\n"
    );
  }
  inline virtual const std::string __getDataType() const { return __s_getDataType(); }
  inline virtual const std::string __getMD5Sum() const { return __s_getMD5Sum(); }
  inline virtual const std::string __getMessageDefinition() const { return __s_getMessageDefinition(); }
  inline static std::string __s_getServerMD5Sum() { return std::string("d189ef261c3d25d1f5ebde5203c19982"); }
  inline virtual const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum(); }
  inline static std::string __s_getServiceDataType() { return std::string("plumesim/ReadPlumeSim"); }
  inline virtual const std::string __getServiceDataType() const { return __s_getServiceDataType(); }
  inline uint32_t serializationLength() const
  {
    unsigned __l = 0;
    __l += odom.serializationLength(); // odom
    return __l;
  }
  virtual uint8_t *serialize(uint8_t *write_ptr,
#if defined(__GNUC__)
                             __attribute__((unused)) uint32_t seq) const
#else
                             uint32_t seq) const
#endif
  {
    write_ptr = odom.serialize(write_ptr, seq);
    return write_ptr;
  }
  virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    read_ptr = odom.deserialize(read_ptr);
    return read_ptr;
  }
};

typedef boost::shared_ptr<Request> RequestPtr;
typedef boost::shared_ptr<Request const> RequestConstPtr;

//! \htmlinclude Response.msg.html

class Response : public ros::Message
{
public:
  typedef boost::shared_ptr<Response> Ptr;
  typedef boost::shared_ptr<Response const> ConstPtr;

  typedef plumesim::NoseSniff _sniff_type;

  plumesim::NoseSniff sniff;

  Response() : ros::Message()
  {
  }
  Response(const Response &copy) : ros::Message(),
    sniff(copy.sniff)
  {
    (void)copy;
  }
  Response &operator =(const Response &copy)
  {
    if (this == &copy)
      return *this;
    sniff = copy.sniff;
    return *this;
  }
  virtual ~Response() 
  {
  }
  inline static std::string __s_getDataType() { return std::string("plumesim/ReadPlumeSimResponse"); }
  inline static std::string __s_getMD5Sum() { return std::string(""); }
  inline static std::string __s_getMessageDefinition()
  {
    return std::string(
    "NoseSniff sniff\n"
    "\n"
    "================================================================================\n"
    "MSG: nav_msgs/Odometry\n"
    "# This represents an estimate of a position and velocity in free space.  \n"
    "# The pose in this message should be specified in the coordinate frame given by header.frame_id.\n"
    "# The twist in this message should be specified in the coordinate frame given by the child_frame_id\n"
    "Header header\n"
    "string child_frame_id\n"
    "geometry_msgs/PoseWithCovariance pose\n"
    "geometry_msgs/TwistWithCovariance twist\n"
    "\n"
    "================================================================================\n"
    "MSG: roslib/Header\n"
    "# Standard metadata for higher-level stamped data types.\n"
    "# This is generally used to communicate timestamped data \n"
    "# in a particular coordinate frame.\n"
    "# \n"
    "# sequence ID: consecutively increasing ID \n"
    "uint32 seq\n"
    "#Two-integer timestamp that is expressed as:\n"
    "# * stamp.secs: seconds (stamp_secs) since epoch\n"
    "# * stamp.nsecs: nanoseconds since stamp_secs\n"
    "# time-handling sugar is provided by the client library\n"
    "time stamp\n"
    "#Frame this data is associated with\n"
    "# 0: no frame\n"
    "# 1: global frame\n"
    "string frame_id\n"
    "\n"
    "================================================================================\n"
    "MSG: geometry_msgs/PoseWithCovariance\n"
    "# This represents a pose in free space with uncertainty.\n"
    "\n"
    "Pose pose\n"
    "\n"
    "# Row-major representation of the 6x6 covariance matrix\n"
    "# The orientation parameters use a fixed-axis representation.\n"
    "# In order, the parameters are:\n"
    "# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\n"
    "float64[36] covariance\n"
    "\n"
    "================================================================================\n"
    "MSG: geometry_msgs/Pose\n"
    "# A representation of pose in free space, composed of postion and orientation. \n"
    "Point position\n"
    "Quaternion orientation\n"
    "\n"
    "================================================================================\n"
    "MSG: geometry_msgs/Point\n"
    "# This contains the position of a point in free space\n"
    "float64 x\n"
    "float64 y\n"
    "float64 z\n"
    "\n"
    "================================================================================\n"
    "MSG: geometry_msgs/Quaternion\n"
    "# This represents an orientation in free space in quaternion form.\n"
    "\n"
    "float64 x\n"
    "float64 y\n"
    "float64 z\n"
    "float64 w\n"
    "\n"
    "================================================================================\n"
    "MSG: geometry_msgs/TwistWithCovariance\n"
    "# This expresses velocity in free space with uncertianty.\n"
    "\n"
    "Twist twist\n"
    "\n"
    "# Row-major representation of the 6x6 covariance matrix\n"
    "# The orientation parameters use a fixed-axis representation.\n"
    "# In order, the parameters are:\n"
    "# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\n"
    "float64[36] covariance\n"
    "\n"
    "================================================================================\n"
    "MSG: geometry_msgs/Twist\n"
    "# This expresses velocity in free space broken into it's linear and angular parts. \n"
    "Vector3  linear\n"
    "Vector3  angular\n"
    "\n"
    "================================================================================\n"
    "MSG: geometry_msgs/Vector3\n"
    "# This represents a vector in free space. \n"
    "\n"
    "float64 x\n"
    "float64 y\n"
    "float64 z\n"
    "================================================================================\n"
    "MSG: plumesim/NoseSniff\n"
    "Header header\n"
    "string[] sensor_model\n"
    "float32[] reading\n"
    "float32 temperature_c	# temperature in celsius\n"
    "float32 temperature_f	# temperature in fahrenheit\n"
    "float32 humidity	# humidity in %\n"
    "\n"
    "\n"
    "\n"
    );
  }
  inline virtual const std::string __getDataType() const { return __s_getDataType(); }
  inline virtual const std::string __getMD5Sum() const { return __s_getMD5Sum(); }
  inline virtual const std::string __getMessageDefinition() const { return __s_getMessageDefinition(); }
  inline static std::string __s_getServerMD5Sum() { return std::string("d189ef261c3d25d1f5ebde5203c19982"); }
  inline virtual const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum(); }
  inline static std::string __s_getServiceDataType() { return std::string("plumesim/ReadPlumeSim"); }
  inline virtual const std::string __getServiceDataType() const { return __s_getServiceDataType(); }
  inline uint32_t serializationLength() const
  {
    unsigned __l = 0;
    __l += sniff.serializationLength(); // sniff
    return __l;
  }
  virtual uint8_t *serialize(uint8_t *write_ptr,
#if defined(__GNUC__)
                             __attribute__((unused)) uint32_t seq) const
#else
                             uint32_t seq) const
#endif
  {
    write_ptr = sniff.serialize(write_ptr, seq);
    return write_ptr;
  }
  virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    read_ptr = sniff.deserialize(read_ptr);
    return read_ptr;
  }
};

typedef boost::shared_ptr<Response> ResponsePtr;
typedef boost::shared_ptr<Response const> ResponseConstPtr;

Request request;
Response response;

};

}

#endif
