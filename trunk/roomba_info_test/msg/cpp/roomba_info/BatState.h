/* auto-generated by genmsg_cpp from /home/pesty/ros-tutorials/ros_tutorials/roomba_info/msg/BatState.msg.  Do not edit! */
#ifndef ROOMBA_INFO_BATSTATE_H
#define ROOMBA_INFO_BATSTATE_H

#include <string>
#include <vector>
#include "ros/message.h"
#include "ros/debug.h"
#include "ros/assert.h"
#include "ros/time.h"

namespace roomba_info
{

//! \htmlinclude BatState.msg.html

class BatState : public ros::Message
{
public:
  typedef boost::shared_ptr<BatState> Ptr;
  typedef boost::shared_ptr<BatState const> ConstPtr;

  typedef uint16_t _value_type;
  typedef uint16_t _state_type;

  uint16_t value;
  uint16_t state;

  BatState() : ros::Message(),
    value(0),
    state(0)
  {
  }
  BatState(const BatState &copy) : ros::Message(),
    value(copy.value),
    state(copy.state)
  {
    (void)copy;
  }
  BatState &operator =(const BatState &copy)
  {
    if (this == &copy)
      return *this;
    value = copy.value;
    state = copy.state;
    return *this;
  }
  virtual ~BatState() 
  {
  }
  inline static std::string __s_getDataType() { return std::string("roomba_info/BatState"); }
  inline static std::string __s_getMD5Sum() { return std::string("93e2bf1b9c0325f37bff05b0ed39bc5d"); }
  inline static std::string __s_getMessageDefinition()
  {
    return std::string(
    "uint16 value\n"
    "uint16 state\n"
    "\n"
    "\n"
    );
  }
  inline virtual const std::string __getDataType() const { return __s_getDataType(); }
  inline virtual const std::string __getMD5Sum() const { return __s_getMD5Sum(); }
  inline virtual const std::string __getMessageDefinition() const { return __s_getMessageDefinition(); }
  inline uint32_t serializationLength() const
  {
    unsigned __l = 0;
    __l += 2; // value
    __l += 2; // state
    return __l;
  }
  virtual uint8_t *serialize(uint8_t *write_ptr,
#if defined(__GNUC__)
                             __attribute__((unused)) uint32_t seq) const
#else
                             uint32_t seq) const
#endif
  {
    SROS_SERIALIZE_PRIMITIVE(write_ptr, value);
    SROS_SERIALIZE_PRIMITIVE(write_ptr, state);
    return write_ptr;
  }
  virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    SROS_DESERIALIZE_PRIMITIVE(read_ptr, value);
    SROS_DESERIALIZE_PRIMITIVE(read_ptr, state);
    return read_ptr;
  }
};

typedef boost::shared_ptr<BatState> BatStatePtr;
typedef boost::shared_ptr<BatState const> BatStateConstPtr;


}

#endif
