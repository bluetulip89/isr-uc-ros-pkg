/* auto-generated by genmsg_cpp from /home/pesty/ros-tutorials/ros_tutorials/turtlesim/msg/Color.msg.  Do not edit! */
#ifndef TURTLESIM_COLOR_H
#define TURTLESIM_COLOR_H

#include <string>
#include <vector>
#include "ros/message.h"
#include "ros/debug.h"
#include "ros/assert.h"
#include "ros/time.h"

namespace turtlesim
{

//! \htmlinclude Color.msg.html

class Color : public ros::Message
{
public:
  typedef boost::shared_ptr<Color> Ptr;
  typedef boost::shared_ptr<Color const> ConstPtr;

  typedef uint8_t _r_type;
  typedef uint8_t _g_type;
  typedef uint8_t _b_type;

  uint8_t r;
  uint8_t g;
  uint8_t b;

  Color() : ros::Message(),
    r(0),
    g(0),
    b(0)
  {
  }
  Color(const Color &copy) : ros::Message(),
    r(copy.r),
    g(copy.g),
    b(copy.b)
  {
    (void)copy;
  }
  Color &operator =(const Color &copy)
  {
    if (this == &copy)
      return *this;
    r = copy.r;
    g = copy.g;
    b = copy.b;
    return *this;
  }
  virtual ~Color() 
  {
  }
  inline static std::string __s_getDataType() { return std::string("turtlesim/Color"); }
  inline static std::string __s_getMD5Sum() { return std::string("353891e354491c51aabe32df673fb446"); }
  inline static std::string __s_getMessageDefinition()
  {
    return std::string(
    "uint8 r\n"
    "uint8 g\n"
    "uint8 b\n"
    "\n"
    "\n"
    );
  }
  inline virtual const std::string __getDataType() const { return __s_getDataType(); }
  inline virtual const std::string __getMD5Sum() const { return __s_getMD5Sum(); }
  inline virtual const std::string __getMessageDefinition() const { return __s_getMessageDefinition(); }
  inline uint32_t serializationLength() const
  {
    unsigned __l = 0;
    __l += 1; // r
    __l += 1; // g
    __l += 1; // b
    return __l;
  }
  virtual uint8_t *serialize(uint8_t *write_ptr,
#if defined(__GNUC__)
                             __attribute__((unused)) uint32_t seq) const
#else
                             uint32_t seq) const
#endif
  {
    SROS_SERIALIZE_PRIMITIVE(write_ptr, r);
    SROS_SERIALIZE_PRIMITIVE(write_ptr, g);
    SROS_SERIALIZE_PRIMITIVE(write_ptr, b);
    return write_ptr;
  }
  virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    SROS_DESERIALIZE_PRIMITIVE(read_ptr, r);
    SROS_DESERIALIZE_PRIMITIVE(read_ptr, g);
    SROS_DESERIALIZE_PRIMITIVE(read_ptr, b);
    return read_ptr;
  }
};

typedef boost::shared_ptr<Color> ColorPtr;
typedef boost::shared_ptr<Color const> ColorConstPtr;


}

#endif
