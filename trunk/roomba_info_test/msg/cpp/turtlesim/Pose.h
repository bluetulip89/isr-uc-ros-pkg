/* auto-generated by genmsg_cpp from /home/pesty/ros-tutorials/ros_tutorials/turtlesim/msg/Pose.msg.  Do not edit! */
#ifndef TURTLESIM_POSE_H
#define TURTLESIM_POSE_H

#include <string>
#include <vector>
#include "ros/message.h"
#include "ros/debug.h"
#include "ros/assert.h"
#include "ros/time.h"

namespace turtlesim
{

//! \htmlinclude Pose.msg.html

class Pose : public ros::Message
{
public:
  typedef boost::shared_ptr<Pose> Ptr;
  typedef boost::shared_ptr<Pose const> ConstPtr;

  typedef float _x_type;
  typedef float _y_type;
  typedef float _theta_type;
  typedef float _linear_velocity_type;
  typedef float _angular_velocity_type;

  float x;
  float y;
  float theta;
  float linear_velocity;
  float angular_velocity;

  Pose() : ros::Message(),
    x(0),
    y(0),
    theta(0),
    linear_velocity(0),
    angular_velocity(0)
  {
  }
  Pose(const Pose &copy) : ros::Message(),
    x(copy.x),
    y(copy.y),
    theta(copy.theta),
    linear_velocity(copy.linear_velocity),
    angular_velocity(copy.angular_velocity)
  {
    (void)copy;
  }
  Pose &operator =(const Pose &copy)
  {
    if (this == &copy)
      return *this;
    x = copy.x;
    y = copy.y;
    theta = copy.theta;
    linear_velocity = copy.linear_velocity;
    angular_velocity = copy.angular_velocity;
    return *this;
  }
  virtual ~Pose() 
  {
  }
  inline static std::string __s_getDataType() { return std::string("turtlesim/Pose"); }
  inline static std::string __s_getMD5Sum() { return std::string("863b248d5016ca62ea2e895ae5265cf9"); }
  inline static std::string __s_getMessageDefinition()
  {
    return std::string(
    "float32 x\n"
    "float32 y\n"
    "float32 theta\n"
    "\n"
    "float32 linear_velocity\n"
    "float32 angular_velocity\n"
    "\n"
    );
  }
  inline virtual const std::string __getDataType() const { return __s_getDataType(); }
  inline virtual const std::string __getMD5Sum() const { return __s_getMD5Sum(); }
  inline virtual const std::string __getMessageDefinition() const { return __s_getMessageDefinition(); }
  inline uint32_t serializationLength() const
  {
    unsigned __l = 0;
    __l += 4; // x
    __l += 4; // y
    __l += 4; // theta
    __l += 4; // linear_velocity
    __l += 4; // angular_velocity
    return __l;
  }
  virtual uint8_t *serialize(uint8_t *write_ptr,
#if defined(__GNUC__)
                             __attribute__((unused)) uint32_t seq) const
#else
                             uint32_t seq) const
#endif
  {
    SROS_SERIALIZE_PRIMITIVE(write_ptr, x);
    SROS_SERIALIZE_PRIMITIVE(write_ptr, y);
    SROS_SERIALIZE_PRIMITIVE(write_ptr, theta);
    SROS_SERIALIZE_PRIMITIVE(write_ptr, linear_velocity);
    SROS_SERIALIZE_PRIMITIVE(write_ptr, angular_velocity);
    return write_ptr;
  }
  virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    SROS_DESERIALIZE_PRIMITIVE(read_ptr, x);
    SROS_DESERIALIZE_PRIMITIVE(read_ptr, y);
    SROS_DESERIALIZE_PRIMITIVE(read_ptr, theta);
    SROS_DESERIALIZE_PRIMITIVE(read_ptr, linear_velocity);
    SROS_DESERIALIZE_PRIMITIVE(read_ptr, angular_velocity);
    return read_ptr;
  }
};

typedef boost::shared_ptr<Pose> PosePtr;
typedef boost::shared_ptr<Pose const> PoseConstPtr;


}

#endif
