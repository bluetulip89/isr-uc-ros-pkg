/* auto-generated by genmsg_cpp from /home/pesty/ros-tutorials/ros_tutorials/turtlesim/msg/Velocity.msg.  Do not edit! */
#ifndef TURTLESIM_VELOCITY_H
#define TURTLESIM_VELOCITY_H

#include <string>
#include <vector>
#include "ros/message.h"
#include "ros/debug.h"
#include "ros/assert.h"
#include "ros/time.h"

namespace turtlesim
{

//! \htmlinclude Velocity.msg.html

class Velocity : public ros::Message
{
public:
  typedef boost::shared_ptr<Velocity> Ptr;
  typedef boost::shared_ptr<Velocity const> ConstPtr;

  typedef float _linear_type;
  typedef float _angular_type;

  float linear;
  float angular;

  Velocity() : ros::Message(),
    linear(0),
    angular(0)
  {
  }
  Velocity(const Velocity &copy) : ros::Message(),
    linear(copy.linear),
    angular(copy.angular)
  {
    (void)copy;
  }
  Velocity &operator =(const Velocity &copy)
  {
    if (this == &copy)
      return *this;
    linear = copy.linear;
    angular = copy.angular;
    return *this;
  }
  virtual ~Velocity() 
  {
  }
  inline static std::string __s_getDataType() { return std::string("turtlesim/Velocity"); }
  inline static std::string __s_getMD5Sum() { return std::string("9d5c2dcd348ac8f76ce2a4307bd63a13"); }
  inline static std::string __s_getMessageDefinition()
  {
    return std::string(
    "float32 linear\n"
    "float32 angular\n"
    "\n"
    );
  }
  inline virtual const std::string __getDataType() const { return __s_getDataType(); }
  inline virtual const std::string __getMD5Sum() const { return __s_getMD5Sum(); }
  inline virtual const std::string __getMessageDefinition() const { return __s_getMessageDefinition(); }
  inline uint32_t serializationLength() const
  {
    unsigned __l = 0;
    __l += 4; // linear
    __l += 4; // angular
    return __l;
  }
  virtual uint8_t *serialize(uint8_t *write_ptr,
#if defined(__GNUC__)
                             __attribute__((unused)) uint32_t seq) const
#else
                             uint32_t seq) const
#endif
  {
    SROS_SERIALIZE_PRIMITIVE(write_ptr, linear);
    SROS_SERIALIZE_PRIMITIVE(write_ptr, angular);
    return write_ptr;
  }
  virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    SROS_DESERIALIZE_PRIMITIVE(read_ptr, linear);
    SROS_DESERIALIZE_PRIMITIVE(read_ptr, angular);
    return read_ptr;
  }
};

typedef boost::shared_ptr<Velocity> VelocityPtr;
typedef boost::shared_ptr<Velocity const> VelocityConstPtr;


}

#endif
