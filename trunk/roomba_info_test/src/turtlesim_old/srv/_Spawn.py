# autogenerated by genmsg_py from SpawnRequest.msg. Do not edit.
import roslib.message
import struct


class SpawnRequest(roslib.message.Message):
  _md5sum = "57f001c49ab7b11d699f8606c1f4f7ff"
  _type = "turtlesim/SpawnRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float32 x
float32 y
float32 theta
string name

"""
  __slots__ = ['x','y','theta','name']
  _slot_types = ['float32','float32','float32','string']

  ## Constructor. Any message fields that are implicitly/explicitly
  ## set to None will be assigned a default value. The recommend
  ## use is keyword arguments as this is more robust to future message
  ## changes.  You cannot mix in-order arguments and keyword arguments.
  ##
  ## The available fields are:
  ##   x,y,theta,name
  ##
  ## @param self: self
  ## @param args: complete set of field values, in .msg order
  ## @param kwds: use keyword arguments corresponding to message field names
  ## to set specific fields. 
  def __init__(self, *args, **kwds):
    if args or kwds:
      super(SpawnRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.x is None:
        self.x = 0.
      if self.y is None:
        self.y = 0.
      if self.theta is None:
        self.theta = 0.
      if self.name is None:
        self.name = ''
    else:
      self.x = 0.
      self.y = 0.
      self.theta = 0.
      self.name = ''

  ## internal API method
  def _get_types(self): return self._slot_types

  ## serialize message into buffer
  ## @param buff StringIO: buffer
  def serialize(self, buff):
    try:
      buff.write(struct.pack('<3f', self.x, self.y, self.theta))
      length = len(self.name)
      #serialize self.name
      buff.write(struct.pack('<I%ss'%length, length, self.name))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  ## unpack serialized message in str into this message instance
  ## @param self: self
  ## @param str str: byte array of serialized message
  def deserialize(self, str):
    try:
      end = 0
      start = end
      end += 12
      (self.x, self.y, self.theta,) = struct.unpack('<3f',str[start:end])
      start = end
      end += 4
      (length,) = struct.unpack('<I',str[start:end])
      #deserialize self.name
      pattern = '<%ss'%length
      start = end
      end += struct.calcsize(pattern)
      (self.name,) = struct.unpack(pattern, str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  ## serialize message with numpy array types into buffer
  ## @param self: self
  ## @param buff StringIO: buffer
  ## @param numpy module: numpy python module
  def serialize_numpy(self, buff, numpy):
    try:
      buff.write(struct.pack('<3f', self.x, self.y, self.theta))
      length = len(self.name)
      #serialize self.name
      buff.write(struct.pack('<I%ss'%length, length, self.name))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  ## unpack serialized message in str into this message instance using numpy for array types
  ## @param self: self
  ## @param str str: byte array of serialized message
  ## @param numpy module: numpy python module
  def deserialize_numpy(self, str, numpy):
    try:
      end = 0
      start = end
      end += 12
      (self.x, self.y, self.theta,) = struct.unpack('<3f',str[start:end])
      start = end
      end += 4
      (length,) = struct.unpack('<I',str[start:end])
      #deserialize self.name
      pattern = '<%ss'%length
      start = end
      end += struct.calcsize(pattern)
      (self.name,) = struct.unpack(pattern, str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

# autogenerated by genmsg_py from SpawnResponse.msg. Do not edit.
import roslib.message
import struct


class SpawnResponse(roslib.message.Message):
  _md5sum = "c1f3d28f1b044c871e6eff2e9fc3c667"
  _type = "turtlesim/SpawnResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """string name

"""
  __slots__ = ['name']
  _slot_types = ['string']

  ## Constructor. Any message fields that are implicitly/explicitly
  ## set to None will be assigned a default value. The recommend
  ## use is keyword arguments as this is more robust to future message
  ## changes.  You cannot mix in-order arguments and keyword arguments.
  ##
  ## The available fields are:
  ##   name
  ##
  ## @param self: self
  ## @param args: complete set of field values, in .msg order
  ## @param kwds: use keyword arguments corresponding to message field names
  ## to set specific fields. 
  def __init__(self, *args, **kwds):
    if args or kwds:
      super(SpawnResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.name is None:
        self.name = ''
    else:
      self.name = ''

  ## internal API method
  def _get_types(self): return self._slot_types

  ## serialize message into buffer
  ## @param buff StringIO: buffer
  def serialize(self, buff):
    try:
      length = len(self.name)
      #serialize self.name
      buff.write(struct.pack('<I%ss'%length, length, self.name))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  ## unpack serialized message in str into this message instance
  ## @param self: self
  ## @param str str: byte array of serialized message
  def deserialize(self, str):
    try:
      end = 0
      start = end
      end += 4
      (length,) = struct.unpack('<I',str[start:end])
      #deserialize self.name
      pattern = '<%ss'%length
      start = end
      end += struct.calcsize(pattern)
      (self.name,) = struct.unpack(pattern, str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  ## serialize message with numpy array types into buffer
  ## @param self: self
  ## @param buff StringIO: buffer
  ## @param numpy module: numpy python module
  def serialize_numpy(self, buff, numpy):
    try:
      length = len(self.name)
      #serialize self.name
      buff.write(struct.pack('<I%ss'%length, length, self.name))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  ## unpack serialized message in str into this message instance using numpy for array types
  ## @param self: self
  ## @param str str: byte array of serialized message
  ## @param numpy module: numpy python module
  def deserialize_numpy(self, str, numpy):
    try:
      end = 0
      start = end
      end += 4
      (length,) = struct.unpack('<I',str[start:end])
      #deserialize self.name
      pattern = '<%ss'%length
      start = end
      end += struct.calcsize(pattern)
      (self.name,) = struct.unpack(pattern, str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

class Spawn(roslib.message.ServiceDefinition):
  _type          = 'turtlesim/Spawn'
  _md5sum = '0b2d2e872a8e2887d5ed626f2bf2c561'
  _request_class  = SpawnRequest
  _response_class = SpawnResponse
