# autogenerated by genmsg_py from Battery.msg. Do not edit.
import roslib.message
import struct

import roslib.msg

class Battery(roslib.message.Message):
  _md5sum = "488db710899c775e90d4a84cb189b94e"
  _type = "irobot/Battery"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header
string charging_source
float32 level			# in %
uint32 time_remaining		# in minutes


================================================================================
MSG: roslib/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

"""
  __slots__ = ['header','charging_source','level','time_remaining']
  _slot_types = ['Header','string','float32','uint32']

  ## Constructor. Any message fields that are implicitly/explicitly
  ## set to None will be assigned a default value. The recommend
  ## use is keyword arguments as this is more robust to future message
  ## changes.  You cannot mix in-order arguments and keyword arguments.
  ##
  ## The available fields are:
  ##   header,charging_source,level,time_remaining
  ##
  ## @param self: self
  ## @param args: complete set of field values, in .msg order
  ## @param kwds: use keyword arguments corresponding to message field names
  ## to set specific fields. 
  def __init__(self, *args, **kwds):
    if args or kwds:
      super(Battery, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = roslib.msg._Header.Header()
      if self.charging_source is None:
        self.charging_source = ''
      if self.level is None:
        self.level = 0.
      if self.time_remaining is None:
        self.time_remaining = 0
    else:
      self.header = roslib.msg._Header.Header()
      self.charging_source = ''
      self.level = 0.
      self.time_remaining = 0

  ## internal API method
  def _get_types(self): return self._slot_types

  ## serialize message into buffer
  ## @param buff StringIO: buffer
  def serialize(self, buff):
    try:
      buff.write(struct.pack('<3I', self.header.seq, self.header.stamp.secs, self.header.stamp.nsecs))
      length = len(self.header.frame_id)
      #serialize self.header.frame_id
      buff.write(struct.pack('<I%ss'%length, length, self.header.frame_id))
      length = len(self.charging_source)
      #serialize self.charging_source
      buff.write(struct.pack('<I%ss'%length, length, self.charging_source))
      buff.write(struct.pack('<fI', self.level, self.time_remaining))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  ## unpack serialized message in str into this message instance
  ## @param self: self
  ## @param str str: byte array of serialized message
  def deserialize(self, str):
    try:
      if self.header is None:
        self.header = roslib.msg._Header.Header()
      end = 0
      start = end
      end += 12
      (self.header.seq, self.header.stamp.secs, self.header.stamp.nsecs,) = struct.unpack('<3I',str[start:end])
      start = end
      end += 4
      (length,) = struct.unpack('<I',str[start:end])
      #deserialize self.header.frame_id
      pattern = '<%ss'%length
      start = end
      end += struct.calcsize(pattern)
      (self.header.frame_id,) = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = struct.unpack('<I',str[start:end])
      #deserialize self.charging_source
      pattern = '<%ss'%length
      start = end
      end += struct.calcsize(pattern)
      (self.charging_source,) = struct.unpack(pattern, str[start:end])
      start = end
      end += 8
      (self.level, self.time_remaining,) = struct.unpack('<fI',str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  ## serialize message with numpy array types into buffer
  ## @param self: self
  ## @param buff StringIO: buffer
  ## @param numpy module: numpy python module
  def serialize_numpy(self, buff, numpy):
    try:
      buff.write(struct.pack('<3I', self.header.seq, self.header.stamp.secs, self.header.stamp.nsecs))
      length = len(self.header.frame_id)
      #serialize self.header.frame_id
      buff.write(struct.pack('<I%ss'%length, length, self.header.frame_id))
      length = len(self.charging_source)
      #serialize self.charging_source
      buff.write(struct.pack('<I%ss'%length, length, self.charging_source))
      buff.write(struct.pack('<fI', self.level, self.time_remaining))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  ## unpack serialized message in str into this message instance using numpy for array types
  ## @param self: self
  ## @param str str: byte array of serialized message
  ## @param numpy module: numpy python module
  def deserialize_numpy(self, str, numpy):
    try:
      if self.header is None:
        self.header = roslib.msg._Header.Header()
      end = 0
      start = end
      end += 12
      (self.header.seq, self.header.stamp.secs, self.header.stamp.nsecs,) = struct.unpack('<3I',str[start:end])
      start = end
      end += 4
      (length,) = struct.unpack('<I',str[start:end])
      #deserialize self.header.frame_id
      pattern = '<%ss'%length
      start = end
      end += struct.calcsize(pattern)
      (self.header.frame_id,) = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = struct.unpack('<I',str[start:end])
      #deserialize self.charging_source
      pattern = '<%ss'%length
      start = end
      end += struct.calcsize(pattern)
      (self.charging_source,) = struct.unpack(pattern, str[start:end])
      start = end
      end += 8
      (self.level, self.time_remaining,) = struct.unpack('<fI',str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

