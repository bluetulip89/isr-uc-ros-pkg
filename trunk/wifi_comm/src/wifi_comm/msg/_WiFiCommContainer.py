# autogenerated by genmsg_py from WiFiCommContainer.msg. Do not edit.
import roslib.message
import struct

import wifi_comm.msg

class WiFiCommContainer(roslib.message.Message):
  _md5sum = "ab6d095210e58ecbbb336035aeeeb7ca"
  _type = "wifi_comm/WiFiCommContainer"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """WiFiNeighbour sender
uint8[] message
string type

================================================================================
MSG: wifi_comm/WiFiNeighbour
string ip
uint32 quality

"""
  __slots__ = ['sender','message','type']
  _slot_types = ['wifi_comm/WiFiNeighbour','uint8[]','string']

  ## Constructor. Any message fields that are implicitly/explicitly
  ## set to None will be assigned a default value. The recommend
  ## use is keyword arguments as this is more robust to future message
  ## changes.  You cannot mix in-order arguments and keyword arguments.
  ##
  ## The available fields are:
  ##   sender,message,type
  ##
  ## @param self: self
  ## @param args: complete set of field values, in .msg order
  ## @param kwds: use keyword arguments corresponding to message field names
  ## to set specific fields. 
  def __init__(self, *args, **kwds):
    if args or kwds:
      super(WiFiCommContainer, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.sender is None:
        self.sender = wifi_comm.msg.WiFiNeighbour()
      if self.message is None:
        self.message = ''
      if self.type is None:
        self.type = ''
    else:
      self.sender = wifi_comm.msg.WiFiNeighbour()
      self.message = ''
      self.type = ''

  ## internal API method
  def _get_types(self): return self._slot_types

  ## serialize message into buffer
  ## @param buff StringIO: buffer
  def serialize(self, buff):
    try:
      length = len(self.sender.ip)
      #serialize self.sender.ip
      buff.write(struct.pack('<I%ss'%length, length, self.sender.ip))
      buff.write(struct.pack('<I', self.sender.quality))
      length = len(self.message)
      #serialize self.message
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(self.message) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *self.message))
      else:
        buff.write(struct.pack('<I%ss'%length, length, self.message))
      length = len(self.type)
      #serialize self.type
      buff.write(struct.pack('<I%ss'%length, length, self.type))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  ## unpack serialized message in str into this message instance
  ## @param self: self
  ## @param str str: byte array of serialized message
  def deserialize(self, str):
    try:
      if self.sender is None:
        self.sender = wifi_comm.msg.WiFiNeighbour()
      end = 0
      start = end
      end += 4
      (length,) = struct.unpack('<I',str[start:end])
      #deserialize self.sender.ip
      pattern = '<%ss'%length
      start = end
      end += struct.calcsize(pattern)
      (self.sender.ip,) = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (self.sender.quality,) = struct.unpack('<I',str[start:end])
      start = end
      end += 4
      (length,) = struct.unpack('<I',str[start:end])
      #deserialize self.message
      pattern = '<%ss'%length
      start = end
      end += struct.calcsize(pattern)
      (self.message,) = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = struct.unpack('<I',str[start:end])
      #deserialize self.type
      pattern = '<%ss'%length
      start = end
      end += struct.calcsize(pattern)
      (self.type,) = struct.unpack(pattern, str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  ## serialize message with numpy array types into buffer
  ## @param self: self
  ## @param buff StringIO: buffer
  ## @param numpy module: numpy python module
  def serialize_numpy(self, buff, numpy):
    try:
      length = len(self.sender.ip)
      #serialize self.sender.ip
      buff.write(struct.pack('<I%ss'%length, length, self.sender.ip))
      buff.write(struct.pack('<I', self.sender.quality))
      length = len(self.message)
      #serialize self.message
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(self.message) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *self.message))
      else:
        buff.write(struct.pack('<I%ss'%length, length, self.message))
      length = len(self.type)
      #serialize self.type
      buff.write(struct.pack('<I%ss'%length, length, self.type))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  ## unpack serialized message in str into this message instance using numpy for array types
  ## @param self: self
  ## @param str str: byte array of serialized message
  ## @param numpy module: numpy python module
  def deserialize_numpy(self, str, numpy):
    try:
      if self.sender is None:
        self.sender = wifi_comm.msg.WiFiNeighbour()
      end = 0
      start = end
      end += 4
      (length,) = struct.unpack('<I',str[start:end])
      #deserialize self.sender.ip
      pattern = '<%ss'%length
      start = end
      end += struct.calcsize(pattern)
      (self.sender.ip,) = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (self.sender.quality,) = struct.unpack('<I',str[start:end])
      start = end
      end += 4
      (length,) = struct.unpack('<I',str[start:end])
      #deserialize self.message
      pattern = '<%ss'%length
      start = end
      end += struct.calcsize(pattern)
      (self.message,) = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = struct.unpack('<I',str[start:end])
      #deserialize self.type
      pattern = '<%ss'%length
      start = end
      end += struct.calcsize(pattern)
      (self.type,) = struct.unpack(pattern, str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

