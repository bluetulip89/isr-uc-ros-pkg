/* auto-generated by genmsg_cpp from /home/blazz/myStacks/wifi_comm/msg/WiFiNeighboursList.msg.  Do not edit! */
#ifndef WIFI_COMM_WIFINEIGHBOURSLIST_H
#define WIFI_COMM_WIFINEIGHBOURSLIST_H

#include <string>
#include <vector>
#include "ros/message.h"
#include "ros/debug.h"
#include "ros/assert.h"
#include "ros/time.h"

#include "wifi_comm/WiFiNeighbour.h"

namespace wifi_comm
{

//! \htmlinclude WiFiNeighboursList.msg.html

class WiFiNeighboursList : public ros::Message
{
public:
  typedef boost::shared_ptr<WiFiNeighboursList> Ptr;
  typedef boost::shared_ptr<WiFiNeighboursList const> ConstPtr;

  typedef std::string _self_ip_type;
  typedef std::vector<wifi_comm::WiFiNeighbour> _neighbours_type;

  std::string self_ip;
  std::vector<wifi_comm::WiFiNeighbour> neighbours;

  WiFiNeighboursList() : ros::Message()
  {
  }
  WiFiNeighboursList(const WiFiNeighboursList &copy) : ros::Message(),
    self_ip(copy.self_ip)
  {
    (void)copy;
    neighbours = copy.neighbours;
  }
  WiFiNeighboursList &operator =(const WiFiNeighboursList &copy)
  {
    if (this == &copy)
      return *this;
    neighbours.clear();
    self_ip = copy.self_ip;
    neighbours = copy.neighbours;
    return *this;
  }
  virtual ~WiFiNeighboursList() 
  {
    neighbours.clear();
  }
  inline static std::string __s_getDataType() { return std::string("wifi_comm/WiFiNeighboursList"); }
  inline static std::string __s_getMD5Sum() { return std::string("284fa5345a29c563601451cf4533e719"); }
  inline static std::string __s_getMessageDefinition()
  {
    return std::string(
    "string self_ip\n"
    "WiFiNeighbour[] neighbours\n"
    "\n"
    "================================================================================\n"
    "MSG: wifi_comm/WiFiNeighbour\n"
    "string ip\n"
    "uint32 quality\n"
    "\n"
    "\n"
    );
  }
  inline virtual const std::string __getDataType() const { return __s_getDataType(); }
  inline virtual const std::string __getMD5Sum() const { return __s_getMD5Sum(); }
  inline virtual const std::string __getMessageDefinition() const { return __s_getMessageDefinition(); }
  void set_neighbours_size(uint32_t __ros_new_size)
  {
    this->neighbours.resize(__ros_new_size);
  }
  inline uint32_t get_neighbours_size() const { return neighbours.size(); }
  uint32_t calc_neighbours_array_serialization_len() const
  {
    uint32_t l = 0;
    uint32_t neighbours_size = neighbours.size();
    for (size_t i = 0; i < neighbours_size; i++)
      l += neighbours[i].serializationLength();
    return l;
  }
  inline void get_neighbours_vec (std::vector<wifi_comm::WiFiNeighbour> &__ros_vec) const
  {
    __ros_vec = this->neighbours;
  }
  inline void set_neighbours_vec(const std::vector<wifi_comm::WiFiNeighbour> &__ros_vec)
  {
    this->neighbours = __ros_vec;
  }
  inline uint32_t serializationLength() const
  {
    unsigned __l = 0;
    __l += 4 + self_ip.length(); // self_ip
    __l += 4 + calc_neighbours_array_serialization_len(); // neighbours
    return __l;
  }
  virtual uint8_t *serialize(uint8_t *write_ptr,
#if defined(__GNUC__)
                             __attribute__((unused)) uint32_t seq) const
#else
                             uint32_t seq) const
#endif
  {
    unsigned __ros_self_ip_len = self_ip.length();
    SROS_SERIALIZE_PRIMITIVE(write_ptr, __ros_self_ip_len);
    SROS_SERIALIZE_BUFFER(write_ptr, self_ip.c_str(), __ros_self_ip_len);
    uint32_t __neighbours_size = neighbours.size();
    SROS_SERIALIZE_PRIMITIVE(write_ptr, __neighbours_size);
    for (size_t i = 0; i < __neighbours_size; i++)
      write_ptr = neighbours[i].serialize(write_ptr, seq);
    return write_ptr;
  }
  virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    unsigned __ros_self_ip_len;
    SROS_DESERIALIZE_PRIMITIVE(read_ptr, __ros_self_ip_len);
    self_ip = std::string((const char *)read_ptr, __ros_self_ip_len);
    read_ptr += __ros_self_ip_len;
    uint32_t __neighbours_size;
    SROS_DESERIALIZE_PRIMITIVE(read_ptr, __neighbours_size);
    set_neighbours_size(__neighbours_size);
    for (size_t i = 0; i < __neighbours_size; i++)
      read_ptr = neighbours[i].deserialize(read_ptr);
    return read_ptr;
  }
};

typedef boost::shared_ptr<WiFiNeighboursList> WiFiNeighboursListPtr;
typedef boost::shared_ptr<WiFiNeighboursList const> WiFiNeighboursListConstPtr;


}

#endif
