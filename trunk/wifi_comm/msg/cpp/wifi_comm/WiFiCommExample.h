/* auto-generated by genmsg_cpp from /home/blazz/myStacks/wifi_comm/msg/WiFiCommExample.msg.  Do not edit! */
#ifndef WIFI_COMM_WIFICOMMEXAMPLE_H
#define WIFI_COMM_WIFICOMMEXAMPLE_H

#include <string>
#include <vector>
#include "ros/message.h"
#include "ros/debug.h"
#include "ros/assert.h"
#include "ros/time.h"

namespace wifi_comm
{

//! \htmlinclude WiFiCommExample.msg.html

class WiFiCommExample : public ros::Message
{
public:
  typedef boost::shared_ptr<WiFiCommExample> Ptr;
  typedef boost::shared_ptr<WiFiCommExample const> ConstPtr;

  typedef std::string _chat_type;

  std::string chat;

  WiFiCommExample() : ros::Message()
  {
  }
  WiFiCommExample(const WiFiCommExample &copy) : ros::Message(),
    chat(copy.chat)
  {
    (void)copy;
  }
  WiFiCommExample &operator =(const WiFiCommExample &copy)
  {
    if (this == &copy)
      return *this;
    chat = copy.chat;
    return *this;
  }
  virtual ~WiFiCommExample() 
  {
  }
  inline static std::string __s_getDataType() { return std::string("wifi_comm/WiFiCommExample"); }
  inline static std::string __s_getMD5Sum() { return std::string("46b33999799bc7d4f7ffb08f39ab06d8"); }
  inline static std::string __s_getMessageDefinition()
  {
    return std::string(
    "string chat\n"
    "\n"
    "\n"
    );
  }
  inline virtual const std::string __getDataType() const { return __s_getDataType(); }
  inline virtual const std::string __getMD5Sum() const { return __s_getMD5Sum(); }
  inline virtual const std::string __getMessageDefinition() const { return __s_getMessageDefinition(); }
  inline uint32_t serializationLength() const
  {
    unsigned __l = 0;
    __l += 4 + chat.length(); // chat
    return __l;
  }
  virtual uint8_t *serialize(uint8_t *write_ptr,
#if defined(__GNUC__)
                             __attribute__((unused)) uint32_t seq) const
#else
                             uint32_t seq) const
#endif
  {
    unsigned __ros_chat_len = chat.length();
    SROS_SERIALIZE_PRIMITIVE(write_ptr, __ros_chat_len);
    SROS_SERIALIZE_BUFFER(write_ptr, chat.c_str(), __ros_chat_len);
    return write_ptr;
  }
  virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    unsigned __ros_chat_len;
    SROS_DESERIALIZE_PRIMITIVE(read_ptr, __ros_chat_len);
    chat = std::string((const char *)read_ptr, __ros_chat_len);
    read_ptr += __ros_chat_len;
    return read_ptr;
  }
};

typedef boost::shared_ptr<WiFiCommExample> WiFiCommExamplePtr;
typedef boost::shared_ptr<WiFiCommExample const> WiFiCommExampleConstPtr;


}

#endif
