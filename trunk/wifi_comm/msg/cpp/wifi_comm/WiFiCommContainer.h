/* auto-generated by genmsg_cpp from /home/blazz/myStacks/wifi_comm/msg/WiFiCommContainer.msg.  Do not edit! */
#ifndef WIFI_COMM_WIFICOMMCONTAINER_H
#define WIFI_COMM_WIFICOMMCONTAINER_H

#include <string>
#include <vector>
#include "ros/message.h"
#include "ros/debug.h"
#include "ros/assert.h"
#include "ros/time.h"

#include "wifi_comm/WiFiNeighbour.h"

namespace wifi_comm
{

//! \htmlinclude WiFiCommContainer.msg.html

class WiFiCommContainer : public ros::Message
{
public:
  typedef boost::shared_ptr<WiFiCommContainer> Ptr;
  typedef boost::shared_ptr<WiFiCommContainer const> ConstPtr;

  typedef wifi_comm::WiFiNeighbour _sender_type;
  typedef std::vector<uint8_t> _message_type;
  typedef std::string _type_type;

  wifi_comm::WiFiNeighbour sender;
  std::vector<uint8_t> message;
  std::string type;

  WiFiCommContainer() : ros::Message()
  {
  }
  WiFiCommContainer(const WiFiCommContainer &copy) : ros::Message(),
    sender(copy.sender),
    type(copy.type)
  {
    (void)copy;
    message = copy.message;
  }
  WiFiCommContainer &operator =(const WiFiCommContainer &copy)
  {
    if (this == &copy)
      return *this;
    message.clear();
    sender = copy.sender;
    message = copy.message;
    type = copy.type;
    return *this;
  }
  virtual ~WiFiCommContainer() 
  {
    message.clear();
  }
  inline static std::string __s_getDataType() { return std::string("wifi_comm/WiFiCommContainer"); }
  inline static std::string __s_getMD5Sum() { return std::string("ab6d095210e58ecbbb336035aeeeb7ca"); }
  inline static std::string __s_getMessageDefinition()
  {
    return std::string(
    "WiFiNeighbour sender\n"
    "uint8[] message\n"
    "string type\n"
    "\n"
    "================================================================================\n"
    "MSG: wifi_comm/WiFiNeighbour\n"
    "string ip\n"
    "uint32 quality\n"
    "\n"
    "\n"
    );
  }
  inline virtual const std::string __getDataType() const { return __s_getDataType(); }
  inline virtual const std::string __getMD5Sum() const { return __s_getMD5Sum(); }
  inline virtual const std::string __getMessageDefinition() const { return __s_getMessageDefinition(); }
  void set_message_size(uint32_t __ros_new_size)
  {
    this->message.resize(__ros_new_size);
  }
  inline uint32_t get_message_size() const { return message.size(); }
  inline void get_message_vec (std::vector<uint8_t> &__ros_vec) const
  {
    __ros_vec = this->message;
  }
  inline void set_message_vec(const std::vector<uint8_t> &__ros_vec)
  {
    this->message = __ros_vec;
  }
  inline uint32_t serializationLength() const
  {
    unsigned __l = 0;
    __l += sender.serializationLength(); // sender
    __l += 4 + (message.size() ? message.size() * 1 : 0); // message
    __l += 4 + type.length(); // type
    return __l;
  }
  virtual uint8_t *serialize(uint8_t *write_ptr,
#if defined(__GNUC__)
                             __attribute__((unused)) uint32_t seq) const
#else
                             uint32_t seq) const
#endif
  {
    write_ptr = sender.serialize(write_ptr, seq);
    uint32_t __message_size = message.size();
    SROS_SERIALIZE_PRIMITIVE(write_ptr, __message_size);
    memcpy(write_ptr, &message[0], sizeof(uint8_t) * __message_size);
    write_ptr += sizeof(uint8_t) * __message_size;
    unsigned __ros_type_len = type.length();
    SROS_SERIALIZE_PRIMITIVE(write_ptr, __ros_type_len);
    SROS_SERIALIZE_BUFFER(write_ptr, type.c_str(), __ros_type_len);
    return write_ptr;
  }
  virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    read_ptr = sender.deserialize(read_ptr);
    uint32_t __message_size;
    SROS_DESERIALIZE_PRIMITIVE(read_ptr, __message_size);
    set_message_size(__message_size);
    memcpy(&message[0], read_ptr, sizeof(uint8_t) * __message_size);
    read_ptr += sizeof(uint8_t) * __message_size;
    unsigned __ros_type_len;
    SROS_DESERIALIZE_PRIMITIVE(read_ptr, __ros_type_len);
    type = std::string((const char *)read_ptr, __ros_type_len);
    read_ptr += __ros_type_len;
    return read_ptr;
  }
};

typedef boost::shared_ptr<WiFiCommContainer> WiFiCommContainerPtr;
typedef boost::shared_ptr<WiFiCommContainer const> WiFiCommContainerConstPtr;


}

#endif
